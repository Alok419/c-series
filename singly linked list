#include <iostream>

using namespace std;

class node{
    public:
    int data;
    node* next;
    
    // constructor
    node(int data){
        this -> data = data;
        this -> next = NULL;
        
    }
    
    // destructor 
    ~node(){
    	int value = this->data;
    	// memory free 
    	if(this->next!= NULL){
    		delete next;
    		this->next = NULL;
		}
		cout <<" memory free for "<< value<< endl;
	}
};

void deleteNode(int position,node* &head){
	// deleting first node
	if(position == 1){
		node* temp = head;
		head = head->next;
		// mempry free
		temp->next= NULL;
		
		delete temp;
		
	}
	else{
		node* curr = head;
		node* prev = NULL;
		int cnt = 1;
		while(cnt<position){
			prev = curr;
			curr = curr->next;
			cnt++;
		}
		prev->next = curr->next;
		curr->next = NULL;
		delete curr;
	}
}

void insertAtHead(node* &head,int d){
    node* temp = new node(d);
    temp -> next = head;
    head = temp;
}

void insertAtTail(node* &tail,int d){
    node* temp = new node(d);
    tail  -> next = temp;
    tail = temp;
}

void print(node* &head){
    node* temp = head;
    while(temp!= NULL){
        cout<< temp -> data << " ";
        temp = temp-> next;
    }
    cout << endl;
}

void insertatPosition(node* &tail,node* &head,int position, int d){
	// insert at start 
	if(position == 1){
		insertAtHead(head,d);
		return;
	}
	
	node* temp= head;
	int cnt = 1;
	while(cnt<position-1){
		temp = temp->next;
		cnt++;
		
	}
	
	// inserting at last position
	if(temp->next== NULL){
		insertAtTail(tail,d);
		return;
	}
	
	// inserting at any position
	node* nodeToInsert = new node(d);
	nodeToInsert->next = temp->next;
	temp->next = nodeToInsert;
	
}

int main()
{
    // creating a new node
    node* node1= new node(10);
    
    // head pointed to node 10
    node* head = node1;
    node* tail = node1;
    
    // insert at head 
    insertAtHead(head,12);
    // insertion at tail
    insertAtTail(tail,15);
    insertatPosition(tail,head,2,20);
    insertatPosition(tail,head,5,22);
    print(head);
    deleteNode(3,head);
    print(head);
    return 0;
}
