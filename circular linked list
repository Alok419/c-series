#include <iostream>
using namespace std;

class node{
	public:
		int data;
		node* next;
		
	// constructor
	node(int d){
		this->data = d;
		this->next= NULL;
	}
	
	//Destructor
	~node(){
		int value = this->data;
		if(this->next!= NULL){
			delete next;
			next = NULL;
		}
		cout<<"memory is free for node with value"<< value << endl;
	}
		
};

void insertNode(node* &tail,int element,int d){
	// empty list
	if(tail==NULL){
		node* newNode = new node(d);
		tail = newNode;
		newNode->next= newNode;
		
	}
	else{
		// non empty
		node* curr = tail;
		while(curr->data != element){
			curr = curr->next;
		}
		node* temp = new node(d);
		temp->next = curr->next;
		curr->next= temp;
    }
}

void print(node* tail) {

    node* temp = tail;

    //empty list
    if(tail == NULL) {
        cout << "List is Empty "<< endl;
        return ;
    }

    do {
        cout << tail -> data << " ";
        tail = tail -> next;
    } while(tail != temp);

    cout << endl;
}

void deleteNode(node* &tail, int value) {

    //empty list
    if(tail == NULL) {
        cout << " List is empty, please check again" << endl;
        return;
    }
    else{
        //non-empty

        //assuming that "value" is present in the Linked List
        node* prev = tail;
        node* curr = prev -> next;

        while(curr -> data != value) {
            prev = curr;
            curr = curr -> next;
        }

        prev -> next = curr -> next;

        //1 Node Linked List
        if(curr == prev) {
            tail = NULL;
        }

        //>=2 Node linked list
        else if(tail == curr ) {
            tail = prev;
        }

        curr -> next = NULL;
        delete curr;

    }

}

int main() {

    node* tail = NULL;
    insertNode(tail,5,3);
    print(tail);
    insertNode(tail,3,5);
    print(tail);
    insertNode(tail,5,7);
    print(tail);
    deleteNode(tail,5);
    print(tail);
    
    return 0;
}
